{"ast":null,"code":"var _jsxFileName = \"D:\\\\MY PROJECTS\\\\mulearn\\\\toDo\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\n\n// Main App component - handles the todo list state and logic\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State for our todo items - using descriptive names like a real dev would\n  const [todoItems, setTodoItems] = useState([]);\n  const [newTaskInput, setNewTaskInput] = useState('');\n\n  // Function to add a new task to our list\n  const handleAddNewTask = () => {\n    // Don't add empty tasks - basic validation\n    if (newTaskInput.trim() === '') return;\n\n    // Create the new task object with a unique ID\n    const freshTask = {\n      id: Date.now(),\n      // Simple way to get unique IDs\n      text: newTaskInput.trim(),\n      isCompleted: false,\n      createdAt: new Date().toLocaleString() // Track when task was created\n    };\n\n    // Update state with the new task\n    setTodoItems(prevItems => [...prevItems, freshTask]);\n\n    // Clear the input field after adding\n    setNewTaskInput('');\n  };\n\n  // Toggle completion status of a task\n  const toggleTaskCompletion = taskId => {\n    setTodoItems(prevItems => prevItems.map(item => item.id === taskId ? {\n      ...item,\n      isCompleted: !item.isCompleted\n    } : item));\n  };\n\n  // Remove a task from the list\n  const removeTaskFromList = taskId => {\n    setTodoItems(prevItems => prevItems.filter(item => item.id !== taskId));\n  };\n\n  // Handle Enter key press in input field\n  const handleKeyPress = event => {\n    if (event.key === 'Enter') {\n      handleAddNewTask();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"app-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"My Task Manager\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Keep track of your daily tasks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-task-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newTaskInput,\n          onChange: e => setNewTaskInput(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"What do you need to do?\",\n          className: \"task-input-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddNewTask,\n          className: \"add-task-button\",\n          children: \"Add Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasks-list-container\",\n        children: todoItems.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"no-tasks-message\",\n          children: \"No tasks yet. Add one above!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"tasks-list\",\n          children: todoItems.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `task-item ${task.isCompleted ? 'completed' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: task.isCompleted,\n              onChange: () => toggleTaskCompletion(task.id),\n              className: \"task-checkbox\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"task-text\",\n              children: task.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => removeTaskFromList(task.id),\n              className: \"delete-task-btn\",\n              title: \"Delete this task\",\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this)]\n          }, task.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), todoItems.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tasks-summary\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total tasks: \", todoItems.length, \" | Completed: \", todoItems.filter(task => task.isCompleted).length, \" | Pending: \", todoItems.filter(task => !task.isCompleted).length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KiJf+qrYZjiO/GrYLCOSP4VekUw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","todoItems","setTodoItems","newTaskInput","setNewTaskInput","handleAddNewTask","trim","freshTask","id","Date","now","text","isCompleted","createdAt","toLocaleString","prevItems","toggleTaskCompletion","taskId","map","item","removeTaskFromList","filter","handleKeyPress","event","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onKeyPress","placeholder","onClick","length","task","checked","title","_c","$RefreshReg$"],"sources":["D:/MY PROJECTS/mulearn/toDo/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\n// Main App component - handles the todo list state and logic\r\nfunction App() {\r\n  // State for our todo items - using descriptive names like a real dev would\r\n  const [todoItems, setTodoItems] = useState([]);\r\n  const [newTaskInput, setNewTaskInput] = useState('');\r\n\r\n  // Function to add a new task to our list\r\n  const handleAddNewTask = () => {\r\n    // Don't add empty tasks - basic validation\r\n    if (newTaskInput.trim() === '') return;\r\n    \r\n    // Create the new task object with a unique ID\r\n    const freshTask = {\r\n      id: Date.now(), // Simple way to get unique IDs\r\n      text: newTaskInput.trim(),\r\n      isCompleted: false,\r\n      createdAt: new Date().toLocaleString() // Track when task was created\r\n    };\r\n\r\n    // Update state with the new task\r\n    setTodoItems(prevItems => [...prevItems, freshTask]);\r\n    \r\n    // Clear the input field after adding\r\n    setNewTaskInput('');\r\n  };\r\n\r\n  // Toggle completion status of a task\r\n  const toggleTaskCompletion = (taskId) => {\r\n    setTodoItems(prevItems => \r\n      prevItems.map(item => \r\n        item.id === taskId \r\n          ? { ...item, isCompleted: !item.isCompleted }\r\n          : item\r\n      )\r\n    );\r\n  };\r\n\r\n  // Remove a task from the list\r\n  const removeTaskFromList = (taskId) => {\r\n    setTodoItems(prevItems => \r\n      prevItems.filter(item => item.id !== taskId)\r\n    );\r\n  };\r\n\r\n  // Handle Enter key press in input field\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === 'Enter') {\r\n      handleAddNewTask();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <header className=\"app-header\">\r\n        <h1>My Task Manager</h1>\r\n        <p>Keep track of your daily tasks</p>\r\n      </header>\r\n\r\n      <main className=\"main-content\">\r\n        {/* Input section for adding new tasks */}\r\n        <div className=\"add-task-section\">\r\n          <input\r\n            type=\"text\"\r\n            value={newTaskInput}\r\n            onChange={(e) => setNewTaskInput(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            placeholder=\"What do you need to do?\"\r\n            className=\"task-input-field\"\r\n          />\r\n          <button \r\n            onClick={handleAddNewTask}\r\n            className=\"add-task-button\"\r\n          >\r\n            Add Task\r\n          </button>\r\n        </div>\r\n\r\n        {/* Display the list of tasks */}\r\n        <div className=\"tasks-list-container\">\r\n          {todoItems.length === 0 ? (\r\n            <p className=\"no-tasks-message\">No tasks yet. Add one above!</p>\r\n          ) : (\r\n            <ul className=\"tasks-list\">\r\n              {todoItems.map((task) => (\r\n                <li \r\n                  key={task.id} \r\n                  className={`task-item ${task.isCompleted ? 'completed' : ''}`}\r\n                >\r\n                  {/* Checkbox for completion status */}\r\n                  <input\r\n                    type=\"checkbox\"\r\n                    checked={task.isCompleted}\r\n                    onChange={() => toggleTaskCompletion(task.id)}\r\n                    className=\"task-checkbox\"\r\n                  />\r\n                  \r\n                  {/* Task text with completion styling */}\r\n                  <span className=\"task-text\">\r\n                    {task.text}\r\n                  </span>\r\n                  \r\n                  {/* Delete button */}\r\n                  <button\r\n                    onClick={() => removeTaskFromList(task.id)}\r\n                    className=\"delete-task-btn\"\r\n                    title=\"Delete this task\"\r\n                  >\r\n                    ×\r\n                  </button>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          )}\r\n        </div>\r\n\r\n        {/* Summary section */}\r\n        {todoItems.length > 0 && (\r\n          <div className=\"tasks-summary\">\r\n            <p>\r\n              Total tasks: {todoItems.length} | \r\n              Completed: {todoItems.filter(task => task.isCompleted).length} | \r\n              Pending: {todoItems.filter(task => !task.isCompleted).length}\r\n            </p>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}